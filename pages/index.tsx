import { useMemo, useState, useEffect, useCallback, ReactNode } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import { NextPage } from 'next'
import Web3 from 'web3';

const IPFS_HASH = 'QmNQNLZW5d3EgJnNsHDjVLB9Yjai8sTaXSUn3LS1uV2baJ';
const CITIZEN_NFT_CONTRACT_ADDRESS = '0x7eef591a6cc0403b9652e98e88476fe1bf31ddeb';
const CITIZEN_NFT_IDS = [7, 42, 69];
const ETH_MAINNET_URL = 'wss://mainnet.infura.io/ws/v3/2a109d8f03324ad3b2fe2048168bcd65';

interface StepProps {
  index: number;
  label: ReactNode;
  cta: string;
  active: boolean;
  enabled: boolean;
  onClick(): void;
}

const Step: FC<StepProps> = ({index, label, cta, active, enabled, onClick}) => {
  return (
    <div className={`step ${active ? 'step-active' : ''}`}>
      <span className="step-index">{index + 1}</span>
      {typeof label === 'string' ? <p className="step-content">{label}</p> : <div className="step-content">{label}</div>}
      <div className="step-cta">
        {active && enabled && <button onClick={onClick}>{cta}</button>}
      </div>
    </div>
  );
}

const Home: NextPage = () => {
  const [constitution, setConstitution] = useState<string>();
  const [stepIndex, setStepIndex] = useState(0);
  const [address, setAddress] = useState<string>();
  const [nftCount, setNftCount] = useState<number>();

  const web3 = useMemo(() => new Web3(ETH_MAINNET_URL), []);
  const citizenContract = useMemo(() => new web3.eth.Contract(require('./contract.json').abi, CITIZEN_NFT_CONTRACT_ADDRESS));

  useEffect(() => {
    fetch(`https://ipfs.io/ipfs/${IPFS_HASH}`)
      .then((res) => res.text())
      .then(setConstitution);
  }, []);

  const connectWallet = useCallback(async () => {
    const addresses = await ethereum.request({ method: 'eth_requestAccounts' });
    const address = addresses[0];
    if (!address) return;
    
    const balances = await citizenContract.methods
      .balanceOfBatch([address, address, address], CITIZEN_NFT_IDS)
      .call();
    const count = balances.map(Number).reduce((a, b) => a + b, 0);

    setNftCount(count);
    setAddress(address);
    setStepIndex(1);
  }, [citizenContract]);

  const submitSignature = useCallback(async (content: any, signature: string) => {
    await new Promise((resolve) => setTimeout(resolve, 3000));

    setStepIndex(3);
  }, [address]);

  const approveConstitution = useCallback(async () => {
    const content = {
      message: 'I approve the CityDAO constitution',
      ipfsHash: IPFS_HASH,
    };
    const signature = await ethereum.request({
      method: 'personal_sign',
      params: [address, JSON.stringify(content)],
    });

    setStepIndex(2);
    submitSignature(content, signature);
  }, [address, submitSignature]);

  return (
    <div>
      <Head>
        <title>CityDAO Constitution</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.jpeg" />
      </Head>

      <main>
        <h1 className="text-center">
          <span className="color-primary">CityDAO</span> Constitution
        </h1>
        <p className="text-center">
          Describe what this website is for
        </p>

        <section className="constitution-container">
          {!!constitution && (
            <p>
              {constitution}
            </p>
          )}

        </section>
        <section className="text-center">
          <p className="opacity-50">
            This constitution is stored forever on <a target="_blank" href={`https://ipfs.io/ipfs/${IPFS_HASH}`}>IPFS</a>
          </p>
          <a target="_blank" href={`https://ipfs.io/ipfs/${IPFS_HASH}`} className="text-sm text-italic opacity-50">
            IPFS hash: {IPFS_HASH}
          </a>
        </section>


        <div className="steps-container">
          <Step
            index={0}
            label="Connect wallet with Citizen NFTs"
            cta="Metamask"
            enabled
            active={stepIndex === 0}
            onClick={connectWallet}
          />
          <Step
            index={1}
            label={(
              <div>
                <p>
                  Approve the CityDAO Constitution (Citizen NFTs needed)
                </p>
                <p className="text-sm text-italic opacity-50">
                  When approving the constitution, you will sign a message with the constitution IPFS hash, and the message signature will be stored in <a href="https://github.com/davidfant/constitution-contract" target="_blank">this Github project</a>
                </p>
              </div>
            )}
            cta={`Approve (${nftCount} ${nftCount === 1 ? 'NFT' : 'NFT2'})`}
            enabled={!!nftCount}
            active={stepIndex === 1}
            onClick={approveConstitution}
          />
          <Step
            index={2}
            label={stepIndex === 2 ? 'Submitting vote...' : 'Submit vote'}
            active={stepIndex === 2}
          />
          <Step
            index={3}
            label="Done"
            active={stepIndex === 3}
          />
        </div>
      </main>
    </div>
  )
}

export default Home
